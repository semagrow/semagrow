package org.semagrow.test;

import junit.framework.TestCase;
import org.eclipse.rdf4j.model.Literal;
import org.eclipse.rdf4j.model.impl.SimpleValueFactory;
import org.eclipse.rdf4j.model.vocabulary.XMLSchema;
import org.eclipse.rdf4j.query.*;
import org.eclipse.rdf4j.query.algebra.TupleExpr;
import org.eclipse.rdf4j.repository.Repository;
import org.eclipse.rdf4j.repository.RepositoryConnection;
import org.eclipse.rdf4j.repository.RepositoryException;
import org.eclipse.rdf4j.repository.config.RepositoryConfigException;
import org.semagrow.cli.CliMain;
import org.semagrow.query.SemagrowTupleQuery;
import org.semagrow.repository.impl.SemagrowSailRepository;
import org.semagrow.sail.SemagrowSail;
import org.semagrow.sail.config.SemagrowSailConfig;
import org.semagrow.sail.config.SemagrowSailFactory;

import java.util.Arrays;

public class CropsBenchTest extends TestCase {

    private static final String REPOSITORY_TTL = "/etc/default/semagrow/repository.ttl";
    private static final String RESULTS_JSON = "/tmp/results.json";

    private static int[] template1 = {
            1, 5, 7, 9, 10, 12, 16, 17, 20, 22, 30, 31, 32, 40, 41, 42, 45, 46, 54, 55, 56, 62, 63, 66, 67, 68, 72, 74, 77, 96, 337, 115, 116, 122, 141, 148, 151, 164, 176, 186, 213, 705, 220, 227, 232, 239, 251, 255, 261, 272, 300,
            303, 312, 325, 328, 339, 344, 351, 352, 355, 358, 364, 370, 391, 392, 393, 399, 405, 438, 760, 447, 460, 461, 465, 481, 708, 512, 520, 525, 903, 526, 529, 556, 559, 560, 963, 564, 578, 586, 587, 588, 603, 607, 608, 616,
            617, 619, 630, 636, 637, 647, 668, 670, 683, 686, 687, 688, 690, 699, 702, 703, 704, 712, 716, 717, 725, 727, 1030, 734, 735, 736, 737, 742, 744, 745, 749, 750, 751, 752, 753, 754, 756, 759, 761, 762, 763, 766, 774, 775,
            783, 785, 790, 798, 799, 800, 801, 803, 804, 805, 806, 811, 828, 846, 847, 853, 869, 879, 1612, 883, 887, 894, 895, 897, 904, 905, 906, 907, 915, 925, 927, 930,  931, 932, 935, 937, 948, 953, 954, 960, 967, 968, 980, 983,
            986, 1004, 1005, 1006, 1007, 1008, 1010, 1014, 1015, 1017, 1018, 1020, 1021, 1026, 1027, 1029, 1039, 1040, 1041, 1042, 1053, 1054, 1055, 1058, 1060, 1064, 1065, 1066, 1070, 1075, 1077, 1078, 1100, 1102, 1103, 1108, 1122,
            1126, 1129, 1138, 1139, 1140, 1144, 1145, 1146, 1149, 1152, 1154, 1159, 1161, 1162, 1163, 1165, 1167, 1168, 1169, 1171, 1172, 1175, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1212, 1213,
            1215, 1217, 1228, 1229, 1231, 1613, 1237, 1238, 1239, 1243, 1244, 1245, 1249, 1252, 1253, 1254, 1261, 1263, 1266, 1273, 1294, 1295, 1296, 1299, 1300, 1303, 1314, 1315, 1316, 1319, 1320, 1322, 1323, 1324, 1325, 1327, 1337,
            1341, 1344, 1353, 1354, 1355, 1359, 1360, 1371, 1387, 1396, 1399, 1401, 1403, 1404, 1405, 1409, 1412, 1416, 1426, 1427, 1428, 1433, 1434, 1441, 1442, 1443, 1444, 1447, 1450, 1459, 1460, 1462, 1463, 1466, 1468, 1469, 1470,
            1474, 1475, 1476, 1478, 1479, 1480, 1481, 1486, 2441, 1493, 1494, 1495, 1497, 1501, 1502, 1503, 1505, 1511, 1513, 1515, 1522, 1527, 1528, 1535, 1541, 1545, 1546, 1552, 1554, 1561, 1562, 1568, 1574, 1575, 1576, 1578, 1579,
            1583, 1584, 1586, 1587, 1594, 1602, 1603, 1604, 1606, 1618, 1620, 1623, 1624, 1629, 1632, 1633, 1634, 1635, 1636, 1639, 1645, 1646, 1648, 1652, 1659, 1662, 1667, 1678, 1684, 1690, 1695, 1697, 1698, 1699, 1700, 1702, 1713,
            1714, 1718, 1720, 1725, 1911, 1730, 1732, 1734, 1735, 1737, 1740, 1741, 1742, 1747, 1761, 1766, 1768, 1769, 1770, 1775, 1777, 1780, 1782, 1783, 1784, 1785, 1786, 1789, 1791, 1796, 1797, 1799, 1800, 1802, 1803, 1809, 1811,
            1813, 1816, 1822, 1825, 1826, 1830, 1848, 1850, 1851, 1856, 1858, 1859, 1862, 1863, 1868, 1871, 1872, 1873, 1875, 1878, 1890, 1894, 1895, 1897, 1899, 1901, 1903, 1904, 1908, 1909, 1910, 1913, 1916, 1918, 1920, 1924, 1928,
            1930, 1934, 1935, 1936, 1938, 1941, 1943, 1948, 1949, 1951, 1960, 1961, 1964, 1968, 1970, 1976, 1978, 1991, 3787, 2006, 2011, 2015, 2032, 2033, 2864, 2037, 2045, 2047, 3976, 2049, 2050, 2053, 2056, 2057, 2064, 2065, 2067,
            2074, 2075, 2076, 2078, 2081, 2082, 2086, 2088, 2091, 2093, 2095, 3987, 2102, 2103, 2104, 2105, 2108, 2109, 2110, 2111, 4512, 2121, 2125, 2128, 2131, 2132, 2133, 2137, 2142, 2144, 2146, 2152, 2158, 2160, 4556, 2179, 2180,
            2183, 2184, 2185, 2188, 2189, 2192, 4607, 2196, 2198, 2200, 2204, 2206, 2208, 2211, 2213, 2214, 2217, 2218, 2219, 2220, 2221, 4539, 2232, 2233, 2236, 2239, 2241, 2243, 2248, 2256, 2257, 2261, 2262, 2263, 2264, 2266, 2267,
            4606, 2277, 2278, 2281, 5337, 2286, 2287, 2290, 2304, 2305, 2308, 2311, 2320, 2321, 2322, 2325, 2329, 2331, 2335, 2336, 2339, 2343, 2347, 2348, 2349, 2350, 2352, 2356, 2363, 2367, 2368, 2369, 2370, 2373, 2375, 2376, 2378,
    };

    private static int[] template2 = {
            2389, 2391, 2396, 2397, 2398, 2400, 2401, 2402, 2403, 2405, 2407, 2409, 2411, 2418, 2421, 2433, 2435, 2437, 2438, 2442, 2445, 2456, 5900, 2461, 2465, 2468, 2476, 2478, 2486, 2488, 2489, 2491, 6019, 2497, 2498, 2503, 2506,
            2509, 2513, 2519, 2521, 2522, 2532, 2536, 2540, 2542, 2548, 2552, 2553, 2555, 2556, 2560, 2567, 2569, 2570, 2571, 2572, 2573, 2576, 2580, 2590, 2591, 2592, 2595, 2597, 2598, 2599, 2605, 2617, 2620, 2622, 4811, 2627, 2629,
            2633, 2634, 2635, 2636, 2637, 2643, 2644, 2646, 2647, 2655, 2656, 2657, 2658, 2662, 2664, 2672, 2673, 2674, 2677, 2678, 5020, 2679, 2686, 2687, 2689, 2690, 2691, 2698, 2700, 2704, 2707, 2713, 2715, 2719, 2723, 2724, 2728,
            2729, 2733, 2734, 2735, 2736, 2740, 2743, 2744, 2747, 2748, 2753, 2755, 2765, 2767, 2768, 2771, 2775, 2777, 2787, 2791, 2793, 5223, 2797, 2801, 2807, 2809, 5290, 2819, 2821, 2824, 2825, 2827, 2829, 2830, 2831, 2832, 2833,
            2836, 2839, 2846, 2847, 2848, 2850, 2861, 2862, 2865, 2869, 2870, 2872, 2873, 2874, 2875, 2876, 2878, 2880, 2883, 2887, 2888, 2889, 2891, 2895, 2900, 2911, 2912, 2916, 2919, 2922, 2924, 2925, 2927, 2931, 2944, 2946, 2949,
            2951, 2952, 2953, 2954, 2974, 2977, 2980, 2982, 2988, 2991, 2992, 2994, 2996, 3001, 3002, 3008, 3020, 3022, 3024, 3027, 3033, 3035, 3039, 3040, 3043, 3044, 3045, 3048, 3049, 3050, 3053, 3054, 3055, 3060, 3069, 3074, 3077,
            3078, 3080, 3082, 3086, 3088, 3093, 5579, 3103, 3104, 3106, 3109, 3110, 3114, 3120, 3122, 3123, 3126, 3140, 3141, 5733, 3142, 3145, 3154, 3157, 3159, 3160, 3161, 3165, 6319, 3179, 3180, 3184, 3185, 3186, 7197, 3193, 3194,
            3195, 3203, 3205, 3207, 3208, 3210, 3212, 3213, 3214, 3222, 3223, 3224, 3229, 3231, 3232, 3234, 3237, 3239, 3243, 3244, 3245, 3246, 3258, 3264, 3266, 3267, 3274, 3275, 3276, 3277, 3280, 3281, 3282, 3283, 3285, 3286, 3293,
            3298, 3301, 3303, 3304, 3305, 3308, 3309, 3310, 3311, 3312, 3315, 3320, 3323, 3324, 3326, 3329, 3330, 3331, 3332, 3333, 3334, 3340, 3341, 3344, 3346, 7323, 3347, 3348, 3350, 3352, 3353, 3354, 3356, 3357, 3360, 3377, 3378,
            3379, 3381, 3382, 3384, 3385, 3387, 3388, 3389, 3391, 3392, 3394, 3399, 3402, 3403, 3404, 3407, 8031, 3410, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3421, 3422, 3425, 3430, 3431, 3432, 3433, 3435, 3436, 3440, 3441, 3442,
            3443, 3444, 3446, 3450, 3454, 3456, 3460, 3465, 3466, 3469, 3470, 3471, 3474, 3478, 3479, 3482, 3486, 3488, 3491, 3492, 3495, 3496, 3499, 3500, 3502, 3505, 3507, 3512, 3516, 3518, 3519, 3520, 3525, 3526, 3532, 3534, 3536,
            3537, 3539, 3540, 3542, 3544, 8542, 3545, 3546, 3547, 3548, 3549, 3550, 3553, 3555, 3556, 3557, 3558, 3559, 3560, 3565, 3568, 3570, 3571, 8537, 3574, 3577, 3580, 3581, 3582, 3583, 3585, 3586, 3587, 3588, 3589, 3591, 3593,
            3596, 3598, 3600, 3601, 3603, 3604, 3609, 3611, 3612, 3613, 3614, 3615, 3616, 3619, 3622, 3623, 3624, 3625, 3627, 3629, 3630, 3631, 3632, 3634, 3637, 3640, 3641, 3642, 3646, 3648, 3650, 3651, 3652, 3654, 3655, 3656, 3657,
            3658, 3659, 3660, 3661, 3662, 3663, 3664, 3667, 3668, 3671, 3675, 3676, 3677, 3680, 3681, 3682, 3683, 3686, 3687, 3700, 3703, 3707, 3714, 3719, 3731, 3732, 3737, 3752, 3763, 3764, 3771, 3780, 3783, 3786, 3795, 3796, 8548,
            3800, 3804, 3805, 3808, 3809, 3817, 3824, 3825, 3831, 8626, 3836, 3839, 3840, 3844, 3846, 3853, 3855, 3856, 3857, 3858, 3860, 3864, 3869, 3877, 3880, 3882, 3885, 3887, 3891, 3892, 3899, 3901, 3906, 3910, 3913, 3921, 3926,
            3927, 3928, 3937, 3939, 3940, 3945, 3949, 3952, 3957, 3959, 3960, 3961, 3962, 3966, 3969, 3972, 3973, 3974, 3980, 3981, 3983, 3984, 3985, 3988, 3993, 3996, 3997, 4006, 4008, 4009, 4011, 4014, 4016, 4021, 4022, 4023, 4025,
            4027, 4028, 4035, 4038, 4039, 4040, 4042, 4043, 4057, 4061, 4063, 4072, 4075, 4077, 4078, 4081, 4084, 4088, 4089, 4090, 4094, 4098, 4101, 4102, 4103, 4106, 4107, 4109, 4111, 4113, 4116, 4117, 4118, 4123, 4125, 4126, 4127,
    };

    private static int[] template3 = {
            4130, 4136, 4137, 4138, 4142, 4151, 4165, 4172, 4173, 4174, 4178, 4182, 4184, 4187, 4188, 4189, 4192, 4197, 4207, 4209, 4211, 4212, 4214, 4219, 4220, 4221, 4223, 4227, 4228, 4229, 4232, 4233, 4235, 4244, 4249, 4251, 4252,
            4259, 4260, 4267, 4268, 4270, 4272, 4273, 4275, 4279, 4284, 4294, 4297, 4306, 4309, 4313, 4323, 4326, 4329, 4332, 4338, 4340, 4341, 4342, 4343, 4344, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4366, 4367, 4368, 4372, 4379,
            4390, 4399, 4402, 4403, 4409, 4413, 4420, 4421, 4422, 4425, 4438, 4443, 4444, 4445, 4450, 4451, 4452, 4454, 4466, 4473, 4475, 4479, 4488, 4489, 4499, 4502, 4504, 4507, 4509, 4511, 4513, 4517, 4519, 4528, 4531, 4536, 4557,
            4558, 4560, 4565, 4570, 4573, 4576, 4586, 4600, 4601, 4608, 4612, 4613, 4614, 4615, 4616, 4618, 4620, 4624, 4627, 4629, 4630, 4631, 4633, 4634, 4638, 4639, 4641, 4645, 4647, 4648, 4651, 4659, 4661, 4673, 4674, 4675, 4677,
            4681, 4682, 4688, 4696, 4699, 4705, 4707, 4711, 4713, 4716, 4717, 4721, 4722, 4723, 4725, 4728, 4730, 4733, 4738, 4744, 4745, 4746, 4749, 4753, 4754, 4755, 4758, 4759, 4766, 4768, 4774, 4777, 4783, 4784, 4785, 4787, 4788,
            4791, 4793, 4795, 4800, 4803, 4804, 4809, 4818, 4821, 4827, 4829, 4832, 4834, 4837, 4839, 4840, 4841, 4843, 4848, 4852, 4854, 4858, 4860, 4863, 4866, 4867, 4869, 4873, 4874, 4877, 4879, 4880, 4887, 4891, 4892, 4893, 4895,
            4907, 4910, 4912, 4914, 4916, 4921, 4922, 4924, 4925, 4927, 4929, 4932, 4933, 4936, 4937, 4949, 4952, 4953, 4963, 4967, 4974, 4975, 4981, 4986, 5001, 5002, 5003, 5005, 5010, 5030, 5038, 5043, 5046, 5050, 5053, 5055, 5058,
            5060, 5066, 5068, 5070, 5073, 5080, 5084, 5089, 5092, 5097, 5099, 5102, 5106, 5108, 5110, 5111, 5112, 5118, 5119, 5120, 5122, 5128, 5133, 5134, 5135, 5136, 5139, 5143, 5146, 5150, 5151, 5152, 5153, 5161, 5163, 5171, 5181,
            5184, 5188, 5190, 5192, 5196, 5198, 5207, 5211, 5212, 5213, 5214, 5219, 5220, 5221, 5224, 5234, 5237, 5239, 5243, 5245, 5251, 5254, 5262, 5268, 5269, 5278, 5279, 5282, 5288, 5289, 5291, 5293, 5294, 5295, 5299, 5301, 5303,
            5308, 5309, 5310, 5313, 5314, 5318, 5327, 5330, 5340, 5342, 5346, 5347, 5349, 5360, 5369, 5374, 5375, 5390, 5393, 5395, 5396, 5400, 5403, 5404, 5407, 5413, 5416, 5428, 5431, 5432, 5439, 5445, 5451, 5456, 5469, 5470, 5472,
            5479, 5483, 5486, 5494, 5495, 5496, 5497, 5504, 5511, 5513, 5515, 5517, 5518, 5526, 5527, 5528, 5529, 5530, 5543, 5544, 5549, 5552, 5553, 5557, 5560, 5563, 5565, 5566, 5568, 5569, 5571, 5574, 5590, 5591, 5594, 5596, 5599,
            5602, 5603, 5610, 5611, 5615, 5617, 5619, 5621, 5624, 5628, 5629, 5630, 5633, 5634, 5639, 5640, 5643, 5649, 5651, 5652, 5653, 5654, 5662, 5666, 5668, 5672, 5678, 5680, 5683, 5684, 5685, 5690, 5691, 5692, 5694, 5695, 5703,
            5706, 5707, 5712, 5719, 5721, 5723, 5724, 5727, 5728, 5730, 5736, 5738, 5746, 5751, 5754, 5760, 5765, 5773, 5774, 5775, 5776, 5777, 5779, 5785, 5791, 5797, 5798, 5799, 5802, 5803, 5805, 5810, 5820, 5822, 5823, 5826, 5827,
            5839, 5841, 5842, 5854, 5857, 5858, 5859, 5869, 5870, 5875, 5877, 5879, 5880, 5885, 5888, 5890, 5895, 5896, 5897, 5903, 5908, 5914, 5916, 5917, 5918, 5921, 5925, 5927, 5934, 5937, 5940, 5943, 5947, 5948, 5952, 5953, 5954,
            5959, 5961, 5963, 5976, 5988, 5995, 6004, 6006, 6013, 6023, 6024, 6025, 6026, 6032, 6035, 6038, 6041, 6049, 6050, 6052, 6053, 6055, 6060, 6061, 6063, 6072, 6073, 6076, 6081, 6082, 6084, 6085, 6086, 6088, 6089, 6090, 6092,
            6093, 6095, 6096, 6102, 6103, 6106, 6107, 6109, 6112, 6115, 6116, 6117, 6121, 6126, 6128, 6129, 6131, 6137, 6142, 6143, 6144, 6145, 6147, 6155, 6156, 6159, 6160, 6165, 6168, 6176, 6178, 6182, 6183, 6189, 6191, 6196, 6198,
            6205, 6206, 6207, 6210, 6215, 6218, 6219, 6221, 6223, 6229, 6235, 6243, 6247, 6248, 6249, 6252, 6255, 6263, 6270, 6274, 6277, 6289, 6291, 6294, 6300, 6304, 6305, 6313, 6314, 6315, 6321, 6322, 6325, 6327, 6330, 6332, 6342,
    };

    private static int[] template4 = {
            6346, 6350, 6354, 6358, 6367, 6372, 6373, 6378, 6380, 6381, 6389, 6393, 6396, 6397, 6399, 6406, 6409, 6419, 6426, 6433, 6435, 6448, 6450, 6459, 6463, 6474, 6477, 6483, 6491, 6495, 6497, 6499, 6502, 6503, 6505, 6509, 6511,
            6512, 6519, 6520, 6523, 6524, 6525, 6549, 6551, 6552, 6561, 6565, 6569, 6572, 6577, 6578, 6579, 6581, 6585, 6586, 6589, 6592, 6595, 6599, 6601, 6605, 6620, 6627, 6629, 6633, 6638, 6640, 6645, 6646, 6647, 6648, 6653, 6654,
            6655, 6657, 6663, 6671, 6673, 6677, 6680, 6681, 6688, 6689, 6690, 6703, 6705, 6706, 6711, 6719, 6723, 6732, 6735, 6737, 6738, 6739, 6740, 6744, 6761, 6762, 6763, 6780, 6781, 6782, 6789, 6791, 6792, 6794, 6795, 6796, 6822,
            6825, 6828, 6831, 6835, 6837, 6838, 6847, 6850, 6851, 6856, 6857, 6858, 6868, 6871, 6872, 6876, 6877, 6880, 6881, 6882, 6890, 6893, 6894, 6895, 6897, 6899, 6907, 6909, 6915, 6918, 6921, 6922, 6923, 6932, 6934, 6944, 6949,
            6951, 6954, 6964, 6970, 6972, 6975, 6978, 6982, 6985, 7003, 7019, 7025, 7031, 7033, 7039, 7041, 7043, 7046, 7049, 7050, 7053, 7054, 7059, 7060, 7061, 7063, 7066, 7077, 7079, 7081, 7082, 7083, 7087, 7088, 7102, 7104, 7107,
            7114, 7124, 7135, 7147, 7151, 7159, 7165, 7167, 7170, 7173, 7175, 7176, 7185, 7187, 7191, 7194, 7203, 7212, 7217, 7221, 7228, 7229, 7231, 7232, 7234, 7240, 7242, 7243, 7244, 7249, 7251, 7254, 7255, 7256, 7257, 7262, 7264,
            7269, 7270, 7275, 7276, 7281, 7283, 7287, 7288, 7292, 7295, 7301, 7303, 7304, 7305, 7308, 7309, 7316, 7322, 7324, 7325, 7326, 7331, 7334, 7337, 7338, 7339, 7340, 7344, 7346, 7347, 7350, 7353, 7355, 7356, 7357, 7358, 7359,
            7360, 7364, 7365, 7367, 7369, 7371, 7378, 7386, 7387, 7388, 7390, 7395, 7396, 7397, 7399, 7401, 7402, 7403, 7411, 7413, 7416, 7418, 7420, 7426, 7436, 7439, 7440, 7441, 7442, 7443, 7445, 7449, 7450, 7452, 7455, 7458, 7459,
            7460, 7461, 7463, 7464, 7465, 7467, 7470, 7471, 7479, 7487, 7488, 7490, 7491, 7492, 7499, 7500, 7502, 7504, 7514, 7515, 7516, 7517, 7518, 7519, 7524, 7525, 7526, 7527, 7528, 7533, 7538, 7540, 7542, 7544, 7545, 7550, 7553,
            7556, 7559, 7561, 7562, 7565, 7566, 7572, 7573, 7576, 7579, 7584, 7586, 7587, 7588, 7592, 7595, 7597, 7601, 7629, 7655, 7656, 7659, 7661, 7662, 7671, 7686, 7687, 7695, 7702, 7703, 7708, 7709, 7713, 7714, 7715, 7718, 7726,
            7727, 7730, 7733, 7736, 7737, 7741, 7747, 7748, 7751, 7763, 7764, 7765, 7766, 7768, 7776, 7777, 7778, 7781, 7783, 7786, 7805, 7810, 7812, 7816, 7825, 7827, 7833, 7840, 7842, 7843, 7845, 7848, 7850, 7852, 7853, 7857, 7858,
            7860, 7861, 7862, 7863, 7864, 7867, 7870, 7872, 7875, 7877, 7880, 7884, 7887, 7888, 7890, 7893, 7897, 7899, 7904, 7909, 7913, 7916, 7918, 7919, 7926, 7931, 7932, 7935, 7937, 7939, 7943, 7947, 7948, 7950, 7952, 7953, 7954,
            7963, 7965, 7966, 7975, 7980, 7987, 7989, 7990, 7991, 7993, 7997, 7998, 8001, 8002, 8004, 8007, 8008, 8009, 8010, 8012, 8013, 8014, 8020, 8023, 8025, 8027, 8028, 8029, 8033, 8034, 8035, 8038, 8042, 8043, 8044, 8048, 8049,
            8058, 8061, 8062, 8071, 8076, 8078, 8082, 8084, 8085, 8091, 8093, 8094, 8095, 8097, 8099, 8101, 8107, 8109, 8112, 8115, 8311, 8318, 8332, 8364, 8371, 8375, 8380, 8381, 8389, 8390, 8398, 8410, 8430, 8435, 8436, 8448, 8460,
            8463, 8476, 8485, 8490, 8494, 8500, 8502, 8507, 8509, 8517, 8518, 8520, 8525, 8527, 8531, 8538, 8539, 8550, 8556, 8565, 8566, 8575, 8576, 8577, 8578, 8584, 8585, 8589, 8593, 8594, 8595, 8598, 8600, 8602, 8605, 8616, 8617,
            8619, 8621, 8622, 8623, 8631, 8632, 8633, 8639, 8640, 8642, 8644, 8646, 8647, 8653, 8655, 8657, 8658, 8660, 8661, 8662, 8665, 8667, 8670, 8675, 8769, 8770, 8771, 8772, 8775, 8779, 8783, 8789, 8794, 8801, 8803, 8804, 8807,
            8811, 8813, 8814, 8821, 8823, 8825, 8826, 8832, 8835, 8836, 8840
    };

    private static int[] diff1 = { 303 };
    private static int[] diff2 = { 3385 };
    private static int[] diff3 = { 303, 3033, 3385, 5765 };


    public static void main(String[] args) throws InterruptedException {
        for (int i: diff1) {
            execute(query1(i), i, "q1");
            /* the result set of each query is placed in /tmp/result-q1-i.json */
            Thread.sleep(1000);
        }
    }

    public static void decompose(String queryString) {
        try {
            SemagrowSailFactory factory = new SemagrowSailFactory();
            SemagrowSailConfig config = new SemagrowSailConfig();
            Repository repository = new SemagrowSailRepository((SemagrowSail) factory.getSail(config));
            repository.initialize();
            RepositoryConnection conn = repository.getConnection();
            TupleQuery query = conn.prepareTupleQuery(QueryLanguage.SPARQL, queryString);
            TupleExpr plan = ((SemagrowTupleQuery) query).getDecomposedQuery();

        } catch (RepositoryConfigException e) {
            e.printStackTrace();
        } catch (RepositoryException e) {
            e.printStackTrace();
        } catch (MalformedQueryException e) {
            e.printStackTrace();
        } catch (QueryEvaluationException e) {
            e.printStackTrace();
        } catch (TupleQueryResultHandlerException e) {
            e.printStackTrace();
        }
    }

    private static void execute(String queryString, int i, String q) {
        String result_file = "/tmp/result-" + q + "-" + i + ".json";
        String[] argv = {REPOSITORY_TTL, queryString, result_file};
        CliMain.main(argv);
    }

    public static String query1(int id) {
        return  "PREFIX lucas: <http://deg.iit.demokritos.gr/lucas/>\n" +
                "PREFIX lucas_r: <http://deg.iit.demokritos.gr/lucas/resource/>\n" +
                "PREFIX invekos: <http://earthanalytics.eu/fs/ontology/>\n" +
                "PREFIX lictm: <http://deg.iit.demokritos.gr/lictm/>\n" +
                "PREFIX geof: <http://www.opengis.net/def/function/geosparql/>\n" +
                "PREFIX geo: <http://www.opengis.net/ont/geosparql#>\n" +
                "PREFIX opengis: <http://www.opengis.net/def/uom/OGC/1.0/>\n" +
                "\n" +
                "SELECT * WHERE {\n" +
                "  {\n" +
                "    SELECT * WHERE {\n" +
                "      lucas_r:" + id + " geo:hasGeometry ?l_geom_id .\n" +
                "      ?l_geom_id geo:asWKT ?l_geom .\n" +
                "      ?inv invekos:hasCropTypeNumber ?i_ctype .\n" +
                "      ?inv geo:hasGeometry ?i_geom_id .\n" +
                "      ?i_geom_id geo:asWKT ?i_geom .\n" +
                "      BIND(geof:distance(?l_geom,?i_geom,opengis:metre) as ?distance) .\n" +
                "      FILTER(?distance < 10) .\n" +
                "    }\n" +
                "    ORDER BY ASC(?distance)\n" +
                "    LIMIT 1\n" +
                "  }\n" +
                "  lucas_r:" + id + " lucas:hasLC1 ?lc1 .\n" +
                "  lucas_r:" + id + " lucas:hasLC1_SPEC ?lc1_sp .\n" +
                "  ?c lictm:lucasLC1 ?lc1 .\n" +
                "  ?c lictm:lucasLC1_spec ?lc1_sp .\n" +
                "  ?c lictm:invekosCropTypeNumber ?l_ctype .\n" +
                "  FILTER(?l_ctype = ?i_ctype) .\n" +
                "}\n";
    }

    public static String query2(int id) {
        return  "PREFIX lucas: <http://deg.iit.demokritos.gr/lucas/>\n" +
                "PREFIX lucas_r: <http://deg.iit.demokritos.gr/lucas/resource/>\n" +
                "PREFIX invekos: <http://earthanalytics.eu/fs/ontology/>\n" +
                "PREFIX lictm: <http://deg.iit.demokritos.gr/lictm/>\n" +
                "PREFIX geof: <http://www.opengis.net/def/function/geosparql/>\n" +
                "PREFIX geo: <http://www.opengis.net/ont/geosparql#>\n" +
                "PREFIX opengis: <http://www.opengis.net/def/uom/OGC/1.0/>\n" +
                "\n" +
                "SELECT * WHERE {\n" +
                "  {\n" +
                "    SELECT * WHERE {\n" +
                "      lucas_r:" + id + " geo:hasGeometry ?l_geom_id .\n" +
                "      ?l_geom_id geo:asWKT ?l_geom .\n" +
                "      ?inv invekos:hasCropTypeNumber ?i_ctype .\n" +
                "      ?inv geo:hasGeometry ?i_geom_id .\n" +
                "      ?i_geom_id geo:asWKT ?i_geom .\n" +
                "      BIND(geof:distance(?l_geom,?i_geom,opengis:metre) as ?distance) .\n" +
                "      FILTER(?distance < 10) .\n" +
                "    }\n" +
                "    ORDER BY ASC(?distance)\n" +
                "    LIMIT 1\n" +
                "  }\n" +
                "  FILTER NOT EXISTS {\n" +
                "    lucas_r:" + id + " lucas:hasLC1 ?lc1 .\n" +
                "    lucas_r:" + id + " lucas:hasLC1_SPEC ?lc1_sp .\n" +
                "    ?c lictm:lucasLC1 ?lc1 .\n" +
                "    ?c lictm:lucasLC1_spec ?lc1_sp .\n" +
                "    ?c lictm:invekosCropTypeNumber ?l_ctype .\n" +
                "    FILTER(?l_ctype = ?i_ctype) .\n" +
                "  }\n" +
                "}\n";
    }

    public static String query3(int id) {
        return  "PREFIX lucas: <http://deg.iit.demokritos.gr/lucas/>\n" +
                "PREFIX lucas_r: <http://deg.iit.demokritos.gr/lucas/resource/>\n" +
                "PREFIX invekos: <http://earthanalytics.eu/fs/ontology/>\n" +
                "PREFIX lictm: <http://deg.iit.demokritos.gr/lictm/>\n" +
                "PREFIX geof: <http://www.opengis.net/def/function/geosparql/>\n" +
                "PREFIX geo: <http://www.opengis.net/ont/geosparql#>\n" +
                "PREFIX opengis: <http://www.opengis.net/def/uom/OGC/1.0/>\n" +
                "\n" +
                "SELECT * WHERE {\n" +
                "  lucas_r:" + id + " lucas:hasLC1 ?lc1 .\n" +
                "  FILTER NOT EXISTS {\n" +
                "    lucas_r:" + id + " geo:hasGeometry ?l_geom_id .\n" +
                "    ?l_geom_id geo:asWKT ?l_geom .\n" +
                "    ?inv invekos:hasCropTypeNumber ?i_ctype .\n" +
                "    ?inv geo:hasGeometry ?i_geom_id .\n" +
                "    ?i_geom_id geo:asWKT ?i_geom .\n" +
                "    FILTER (geof:distance(?l_geom,?i_geom,opengis:metre) < 10) .\n" +
                "  }\n" +
                "}\n";
    }

}